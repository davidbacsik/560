install.packages("reshape")
knitr::opts_chunk$set(echo = TRUE)
calc_ci = function(ci, mean, sd, n){
stopifnot(is.double(ci), is.double(mean), is.double(sd), is.double(n))
lower_bound = dt((1-ci), (n-1), sd)
upper_bound = dt(ci, n-1, sd)
print('The lower bound of the CI is:')
print(lower_bound)
print('The upper bound of the CI is:')
print(upper_bound)
}
calc_ci(0.95, 11, 3, 42)
? dt
knitr::opts_chunk$set(echo = TRUE)
calc_ci = function(ci, mean, sd, n){
stopifnot(is.double(ci), is.double(mean), is.double(sd), is.double(n))
lower_bound = pt((1-ci), (n-1), sd)
upper_bound = pt(ci, n-1, sd)
print('The lower bound of the CI is:')
print(lower_bound)
print('The upper bound of the CI is:')
print(upper_bound)
}
calc_ci(0.95, 11, 3, 42)
knitr::opts_chunk$set(echo = TRUE)
vals = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
hyper_prob <- function(x){
return(dhyper(x, 1000, 9000, 100))
}
hyper_probs = lapply(vals, hyper_prob)
sum(as.integer(hyper_probs))
vals = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
hyper_prob <- function(x){
return(dhyper(x, 1000, 9000, 100))
}
hyper_probs = lapply(vals, hyper_prob)
do.call(sum, hyper_probs)
vals = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
hyper_prob <- function(x){
return(dhyper(x, 1000, 9000, 100))
}
hyper_probs = lapply(vals, hyper_prob)
cum_prob = do.call(sum, hyper_probs)
cum_prob
vals = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
hyper_prob <- function(x){
return(dhyper(x, 1000, 9000, 100))
}
hyper_probs = lapply(vals, hyper_prob)
cum_prob = do.call(sum, hyper_probs)
gt_15 = 1 - cum prob
vals = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
hyper_prob <- function(x){
return(dhyper(x, 1000, 9000, 100))
}
hyper_probs = lapply(vals, hyper_prob)
cum_prob = do.call(sum, hyper_probs)
gt_15 = 1 - cum_prob
install.packages("latexpdf")
Sys.which("pdflatex")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
numbers = 50:5000
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(test.matrix)
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(test.matrix)
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(test.matrix)
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(test.matrix)
attributes(chisq.test(test.matrix))
chisq.test(test.matrix)$p.value
big.matrix = matrix(sample(numbers, 100000, replace = TRUE), ncol = 4)
head(big.matrix)
chisq.results = vector() # Define chisq.results vector that will be used inside the loop
# This loop of just 25000 elements takes ~10s to run on my computer!
for (i in 1:length(big.matrix[,1])) {
test.matrix = matrix(big.matrix[i,], nrow = 2)
test.result = chisq.test(test.matrix)$p.value
chisq.results = c(chisq.results, test.result)
}
# We can check the runtime of any R expression with system.time()
chisq.results = vector()
system.time(for (i in 1:length(big.matrix[,1])) {
test.matrix = matrix(big.matrix[i,], nrow = 2)
test.result = chisq.test(test.matrix)$p.value
chisq.results = c(chisq.results, test.result)
})
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(test.matrix)
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test([[8, 10],[4,3]])
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test([[8,10],[4,3]])
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(as.matrix([[5,3.6],[4.6,1.5]))
test.matrix = matrix(sample(numbers, 4), nrow = 2)
test.matrix
chisq.test(test.matrix)
big.matrix = matrix(sample(numbers, 100000, replace = TRUE), ncol = 4)
head(big.matrix)
chisq.results = vector() # Define chisq.results vector that will be used inside the loop
# This loop of just 25000 elements takes ~10s to run on my computer!
for (i in 1:length(big.matrix[,1])) {
test.matrix = matrix(big.matrix[i,], nrow = 2)
test.result = chisq.test(test.matrix)$p.value
chisq.results = c(chisq.results, test.result)
}
# We can check the runtime of any R expression with system.time()
chisq.results = vector()
system.time(for (i in 1:length(big.matrix[,1])) {
test.matrix = matrix(big.matrix[i,], nrow = 2)
test.result = chisq.test(test.matrix)$p.value
chisq.results = c(chisq.results, test.result)
})
apply.pvalues = apply(big.matrix, 1, function(x) {chisq.test(matrix(x, nrow=2))})
apply.pvalues[1]
apply.pvalues = apply(big.matrix, 1, function(x) {chisq.test(matrix(x, nrow=2))$p.value})
apply.pvalues[1]
system.time(apply(big.matrix, 1, function(x) {chisq.test(matrix(x, nrow=2))$p.value}))
plot(chisq.results, apply.pvalues)
ww_data = read.table(file="http://faculty.washington.edu/dfowler/teaching/2016/GNOM560/560_ww_data.txt", header = T, sep = '\t')
ww_data = read.table(file="http://faculty.washington.edu/dfowler/teaching/2016/GNOM560/560_ww_data.txt", header = T, sep = '\t')
names(ww_data)
apply(ww_data, 1, function(x) {print(x)})
check_polarity = function(x){
if x$aa1_polarity == aa2_polarity:
check_polarity = function(x){
if x$aa1_polarity == aa2_polarity:
apply(ww_data, 1, function(x) {print(x$aa1)})
check_polarity = function(x){
x$aa1
#if ww_data$aa1_polarity == aa2_polarity:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x){
x$aa1
#if ww_data$aa1_polarity == aa2_polarity:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x){
x['aa1']
#if ww_data$aa1_polarity == aa2_polarity:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x){
x['aa1']
#if ww_data$aa1_polarity == aa2_polarity:
#  return(TRUE)
#else:
#  return(FALSE)
}
lapply(ww_data, 1, check_polarity)
check_polarity = function(x){
print(x$aa1)
#if ww_data$aa1_polarity == aa2_polarity:
#  return(TRUE)
#else:
#  return(FALSE)
}
lapply(ww_data, 1, check_polarity)
check_polarity = function(x){
if x['aa1_polarity'] == x['aa2_polarity']:
check_polarity = function(x){
if x['aa1_polarity'] == x['aa2_polarity']:
check_polarity = function(x) {
if x['aa1_polarity'] == x['aa2_polarity']:
check_polarity <- function(x) {
if x['aa1_polarity'] == x['aa2_polarity']:
check_polarity = function(x) {
if x['aa1_polarity'] == x['aa2_polarity']:
check_polarity = function(x) {
#if x['aa1_polarity'] == x['aa2_polarity']:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x) {
print(x['aa1_polarity'])
#if x['aa1_polarity'] == x['aa2_polarity']:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x) {
print(x['aa1_polarity'][1])
#if x['aa1_polarity'] == x['aa2_polarity']:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x) {
print(x['aa1_polarity'])
#if x['aa1_polarity'] == x['aa2_polarity']:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x) {
x['aa1_polarity']
#if x['aa1_polarity'] == x['aa2_polarity']:
#  return(TRUE)
#else:
#  return(FALSE)
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x) {
if x['aa1_polarity'] == x['aa2_polarity']:
check_polarity = function(x) {
if x['aa1_polarity'] == x['aa2_polarity']
check_polarity = function(x) {
if x['aa1_polarity'] == x['aa2_polarity'] {
check_polarity = function(x) {
if (x['aa1_polarity'] == x['aa2_polarity']) {
return(TRUE)
}
else {
return(FALSE)
}
}
apply(ww_data, 1, check_polarity)
check_polarity = function(x) {
if(x['aa1_polarity'] == x['aa2_polarity']) {
return(TRUE)
}
else {
return(FALSE)
}
}
apply(ww_data, 1, check_polarity)
rnorm
?rnorm
setwd("Documents/classes/spring_2018/560/week_4/")
source("lecture7_db_script.R")
source("lecture7_db_script.R")
source("lecture7_db_script.R", "a", "b")
source('~/Documents/classes/spring_2018/560/week_4/lecture7_db_script.R', echo=TRUE)
source('~/Documents/classes/spring_2018/560/week_4/lecture7_db_script.R', echo=TRUE)
source('~/Documents/classes/spring_2018/560/week_4/lecture7_db_script.R', echo=TRUE)
